(def element TestElementListRenderer() layout=true
    (scope
        (var background:str='background')
        (var pageIndex:number=0)
        (var data:number = 0)
    )
    (name = 'renderer')
    (style
        (backgroundColor = 0xff55ffff)
        (width = 400px)
        (height = 100px)
    )
    (tf
        (bind text "pageIndex")
        (textColor=0x000000)
    )
    (tf
        (bind text "background")
        (textColor=0x0000ff)
    )
    (tf
        (bind text "data" init=false)
        (text = 'emptyData')
        (textColor=0x0000ff)
    )
)

(def element List(
    name:str,
    binder:str='list',
    renderer_name:str = '',
    list_width:number = 100%,
    list_height:number = 100%,
    container_flow:number = "Flow.VERTICAL",
    vscroll_policy:str = 'auto',
    hscroll_policy:str = 'auto'
) layout=true
    (scope
        (var listRendererName:str = "renderer_name")
        (var listEmptyRendererName:str = 'Test')
        (var boolUseEmptyRenderer:bool = false)
        (var containerFlow:number = "container_flow")
        (var listVscrollPolicy:str = "vscroll_policy")
        (var listHscrollPolicy:str = "hscroll_policy")
        (var listVirtualLayout:bool = true)
        (var listAllowDeselect:bool = false)
        (var listIsMultiselect:bool = false)
        (var containerWidth:number = -1)
        (var containerHeight:number = -1)
        (var containerGap:number = 0)
        (var containerVGap:number = 0)
        (var containerHGap:number = 0)
        (var containerMargin:number = 0)
        (var containerMarginLeft:number = 0)
        (var containerMarginRight:number = 0)
        (var containerMarginTop:number = 0)
        (var containerMarginBottom:number = 0)
        (var containerAlign:number = 0)
        (var containerMaxWidth:number = 100%)
        (var containerMaxHeight:number = 100%)
        (var scopeData:array = [])
        (var instantScrollToItem:bool = false)
        (var scrollToItem:number = 0)
    )
    (style
        (width = "list_width")
        (height = "list_height")
    )
    (list
        (style
            (width = "list_width")
            (height = "list_height")
            (bind maxWidth "containerMaxWidth")
            (bind maxHeight "containerMaxHeight")
        )
        (bind data "scopeData" init=false)
        (bind isVirtualLayout "listVirtualLayout")
        (bind allowDeselect "listAllowDeselect")
        (bind isMultiselect "listIsMultiselect")
        (bind renderer "listRendererName")
        (bindcall scrollToItem "scrollToItem" "instantScrollToItem")
        (bind emptyRenderer "listEmptyRendererName")
        (bind useEmptyRenderer "boolUseEmptyRenderer")
        (container
            (style
                (bind flow "containerFlow")
                (bind width "containerWidth" init=false enabled="containerWidth >= 0")
                (bind height "containerHeight" init=false enabled="containerHeight >= 0")
                (bind gap "containerGap" init=false)
                (bind vgap "containerVGap" init=false)
                (bind hgap "containerHGap" init=false)
                (bind margin "containerMargin" init=false)
                (bind marginLeft "containerMarginLeft" init=false)
                (bind marginRight "containerMarginRight" init=false)
                (bind marginTop "containerMarginTop" init=false)
                (bind marginBottom "containerMarginBottom" init=false)
                (bind align "containerAlign" init=false)
            )
        )
        (horizontalSlider
            (macro ScrollBarH)
        )
        (verticalSlider
            (macro ScrollBarV)
        )
        (bind vscrollPolicy "listVscrollPolicy")
        (bind hscrollPolicy "listHscrollPolicy")
    )
)

(def element Group(
    name:str,
    binder:str = 'group',
    renderer_name:str = '',
    list_width:number = 100%,
    list_height:number = 100%,
    count_renderers:number = 0,
    container_flow:number = "Flow.VERTICAL"
) layout=true
    (scope
        (var listRendererName:str = "renderer_name")
        (var listEmptyRendererName:str = 'Test')
        (var boolUseEmptyRenderer:bool = false)
        (var listAllowDeselect:bool = false)
        (var containerFlow:number = "container_flow")
        (var containerWidth:number = -1)
        (var containerHeight:number = -1)
        (var containerGap:number = 0)
        (var containerVGap:number = 0)
        (var containerHGap:number = 0)
        (var containerMargin:number = 0)
        (var containerMarginLeft:number = 0)
        (var containerMarginRight:number = 0)
        (var containerMarginTop:number = 0)
        (var containerMarginBottom:number = 0)
        (var containerAlign:number = 0)
        (var scopeData:array = [])
    )
    (style
        (width = "list_width")
        (height = "list_height")
    )
    (group
        (style
            (width = "list_width")
            (height = "list_height")
        )
        (bind renderer "listRendererName")
        (bind data "scopeData" init=false)
        (bind emptyRenderer "listEmptyRendererName")
        (bind useEmptyRenderer "boolUseEmptyRenderer")
        (container
            (style
                (bind flow "containerFlow")
                (bind width "containerWidth" init=false enabled="containerWidth >= 0")
                (bind height "containerHeight" init=false enabled="containerHeight >= 0")
                (bind gap "containerGap" init=false)
                (bind vgap "containerVGap" init=false)
                (bind hgap "containerHGap" init=false)
                (bind margin "containerMargin" init=false)
                (bind marginLeft "containerMarginLeft" init=false)
                (bind marginRight "containerMarginRight" init=false)
                (bind marginTop "containerMarginTop" init=false)
                (bind marginBottom "containerMarginBottom" init=false)
                (bind align "containerAlign" init=false)
            )
        )
    )
)